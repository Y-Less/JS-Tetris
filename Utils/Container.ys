#pragma once

#include "Container.ys"

Container = function (contents, _ordered)
{
    "use strict";
    
    // Ensure that children can be added in order.
    if (_ordered === true)
    {
        // Ensure that what we are adding has an "order" function.
        Contract(contents, ['Order']);
        this.IsOrdered = function () { return true; };
    }
    else
    {
        this.IsOrdered = function () { return false; };
    }
    
    var _children = [];
    var _len = 0;
    
    this.GetChildren = function ()
    {
        return _children;
    };
    
    this.Add = function (child)
    {
        if (!contents || child instanceof contents)
        {
            if (_ordered)
            {
                var ordering = child.Order();
                // Add this to the list of children.
                for (var i = 0; i != _len; ++i)
                {
                    if (_children[i].Order() > ordering)
                    {
                        ++_len;
                        _children.splice(i, 0, child);
                        return;
                    }
                }
            }
            ++_len;
            _children.push(child);
        }
    };
    
    this.Remove = function (child)
    {
        // Add this to the list of children.
        for (var i = 0; i != _len; ++i)
        {
            if (_children[i] == child)
            {
                --_len;
                _children.splice(i, 1);
                return;
            }
        }
    };
    
    this.All = function (func, args)
    {
        for (var i = 0; i != _len; ++i)
        {
            if (!(_children[i][func] instanceof Function) || !_children[i][func].apply(_children[i], args))
            {
                return false;
            }
        }
        return true;
    };
    
    this.Any = function (func, args)
    {
        for (var i = 0; i != _len; ++i)
        {
            if (_children[i][func] instanceof Function && _children[i][func].apply(_children[i], args))
            {
                return true;
            }
        }
        return false;
    };
    
    this.Filter = function (func, args)
    {
        var ret = [];
        for (var i = 0; i != _len; ++i)
        {
            if (_children[i][func] instanceof Function && _children[i][func].apply(_children[i], args))
            {
                ret.push(_children[i]);
            }
        }
        return ret;
    };
    
    this.Map = function (func, args)
    {
        for (var i = 0; i != _len; ++i)
        {
            if (_children[i][func] instanceof Function)
            {
                _children[i][func].apply(_children[i], args);
            }
        }
    };
    
    this.FoldL = function (func, initial, args)
    {
        // console.log('len: ' + args.length);
        args.splice(0, 0, initial);
        // console.log('len: ' + args.length);
        for (var i = 0; i != _len; ++i)
        {
            if (_children[i][func] instanceof Function)
            {
                args[0] = _children[i][func].apply(_children[i], args);
            }
        }
        return args[0];
    };
    
    this.FoldR = function (func, args, initial)
    {
        var len = args.length;
        args.push(initial);
        for (var i = _len; i-- != 0; )
        {
            if (_children[i][func] instanceof Function)
            {
                args[len] = _children[i][func].apply(_children[i], args);
            }
        }
        return args[len];
    };
    
    return this;
}

//Interface(Container, ['Render', 'Update', 'On']);

