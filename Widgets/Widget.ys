#pragma once

#include "../Utils/Base.ys"
#include "../Utils/Placeable.ys"
#include "../Utils/Container.ys"

Widget = function (x, y)
{
    "use strict";
    
    this.super(x, y);
    
    var MIN = Math.min;
    var MAX = Math.max;
    
    var _children = new Container(Widget, true);
    
    this.Action = [];
    
    // Create a surface on which to draw this element.
    var _canvas = document.createElement('canvas');
    var _ctx    = _canvas.getContext('2d');
    // Useful properties that don't exist normally :(.
    _ctx.width = 0;
    _ctx.height = 0;
    
    var _z = 1;
    
    var _parent;
    
    var _tx = 0; // True x (after alignment);
    this.TrueWidth = 0;
    this.TrueHeight = 0;
    
    // For this one, we need the help of our parent.
    Object.defineProperty(this, 'Z', {
            configurable: false,
            enumerable: true,
            set: function (v)
            {
                if (v == _z) return;
                if (_parent)
                {
                    _parent.RemoveWidget(this);
                    _parent.AddWidget(this);
                }
                this.Moved();
                return (_z = v);
            },
            get: function () { return _z; }
        });
    
    this.Order = function () { return this.Z; };
    
    /*
        x  - Theoretical "x" position of the parent.
        y  - Theoretical "y" position of the parent.
        bl - Left bounds of the drawing area.
        bt - Top bounds of the drawing area.
        br - Right bounds of the drawing area.
        bb - Bottom bounds of the drawing area.
    */
    this._Render = function (force, ctx, x, y, w, h, bl, bt, br, bb, time)
    {
        if (!this.IsShown()) return false;
        // Get the theoretical start location of this element.
        var width = this.Width;
        var height = this.Height;
        if (width === '100%') width = w;
        if (height === '100%') height = h;
        switch (this.AlignNum())
        {
            case 0:
                _tx = this.X;
                //y += this.Y;
                break;
            case 1:
                _tx = (w - width) / 2 + this.X;
                //y += (h / 2) + this.Y;
                break;
            case 2:
                _tx = w - width - this.X;
                //y += h - this.Y;
                break;
        }
        this.TrueWidth = width;
        this.TrueHeight = height;
        x += _tx;
        y += this.Y;
        //w = this.Width;
        //h = this.Height;
        //if (x >= br || y >= bb || x + _width
        // New bounding rect (for this and children).
        var nbl = MAX(bl, x);
        var nbt = MAX(bt, y);
        var nbr = MIN(br, x + width);
        var nbb = MIN(bb, y + height);
        // Find out if this is entirely outside the bounding rect.  If it is,
        // the new bounding box will be invalid.
        if (nbl >= nbr || nbt >= nbb) return false;
        // Check if we need to change any of the sizes.
        if (this.IsDirty())
        {
            _ctx.width  = _canvas.width  = width;
            _ctx.height = _canvas.height = height;
            this.ResetDirty();
            this.Render(_ctx, time);
        }
        // Redrew the contents, replace it on the parent.
        ctx.drawImage(_canvas, nbl - x, nbt - y, nbr - nbl, nbb - nbt, nbl, nbt, nbr - nbl, nbb - nbt);
        _children.Map('_Render', [ctx, x, y, width, height, nbl, nbt, nbr, nbb, time]);
    };
    
    this.AddWidget = function (child)
    {
        _children.Add(child);
        child.SetParent(this);
    };
    
    this.RemoveWidget = function (child)
    {
        _children.Remove(child);
        child.SetParent();
    };
    
    this._On = function (what, ex, ey, px, py, event, done)
    {
        if (done) return true;
        if (!this.IsShown()) return false;
        // Get the top edge of this element.
        px += _tx;
        py += this.Y;
        if (ex >= px && ex < px + this.TrueWidth && ey >= py && ey < py + this.TrueHeight)
        {
            if (!_children.FoldR('_On', [what, ex, ey, px, py, event], false))
            {
                if (this.On(what, ex - px, ey - py, event)) return true;
            }
        }
        return false;
    };
    
    var _pending = [];
    
    this.SetParent = function (p)
    {
        if ((_parent = p))
        {
            for (var p in _pending)
            {
                _parent.RegisterAction(_pending[p]);
            }
        }
    };
    
    this.RegisterAction = function (on)
    {
        if (_parent)
        {
            _parent.RegisterAction(on);
        }
        _pending.push(on);
    };
    
    this.Fire = function (what)
    {
        if (_parent)
        {
            _parent.Fire(what);
        }
    }
    
    return this;
}

Inherit(Widget, Placeable);
Interface(Widget, ['Render', 'On']);

Widget.prototype.On = function () {};

