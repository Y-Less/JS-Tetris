#include "../Widgets/View.ys"

Wallpaper = function ()
{
    this.super(0, 0);
    
    // All the clouds we currently have.
    var _clouds = [];
    
    this.Width = '100%';
    this.Height = '100%';
    
    var _viewport = new Viewport();
    _viewport.SetWindow(this);
    
    Object.defineProperty(this, 'Viewport', {
            configurable: false,
            enumerable: true,
            writable: false,
            value: _viewport
        });
    
    // Definition of the data underlying a cloud.
    // MODEL.
    function Cloud()
    {
        this.v = Math.random() * 2.0;
        var s = this.v;
        this.w = 150 * s;
        this.h = 85 * s;
        this.v /= 10.0;
        this.x = -this.w;
        this.y = (Math.random() * 1000 - 75.5) | 0;
    }
    
    // VIEW.
    (function ()
    {
        function PreRenderCloud(canvas)
        {
            var ctx = canvas.getContext('2d');
            ctx.beginPath();
            ctx.moveTo(0, 85);
            
            ctx.lineTo(150, 85);
            
            ctx.quadraticCurveTo(130, 35, 110, 65);
            ctx.quadraticCurveTo(75, 0, 40, 65);
            ctx.quadraticCurveTo(20, 35, 0, 85);
            
            ctx.lineWidth = 5;
            ctx.strokeStyle = 'white';
            ctx.stroke();
            ctx.fillStyle="white";
            ctx.fill();
        }
        
        var _cloud = document.createElement('canvas')
        _cloud.width = 150;
        _cloud.height = 85;
        PreRenderCloud(_cloud);
        
        Cloud.prototype.Draw = function (ctx, mx, my)
        {
            if (this.x < mx && this.y < my)
                ctx.drawImage(_cloud, (0.5 + this.x) | 0, this.y, this.w, this.h);
        };
    })();
    
    // CONTROLLER.
    Cloud.prototype.Move = function (time)
    {
        return (this.x += time * this.v) <= 2000.0;
    };
    
    var _lastAdded = 0;
    
    this.Render = function (ctx, time, force)
    {
        //console.log('update: ' + ctx.width + ', ' + ctx.height);
        ctx.fillStyle = 'skyblue';
        var w = ctx.width;
        var h = ctx.height;
        
        ctx.fillRect(0, 0, w, h);
        
        // The list of clouds that still exist after this loop.
        var clouds = [];
        
        for (var i in _clouds)
        {
            // Build a new list of all clouds that still exist.
            var c = _clouds[i];
            if (c.Move(time))
            if ((c.x += (time * c.v) / 10) <= 2000)
            {
                c.Draw(ctx, w, h);
                clouds.push(c);
            }
        }
        
        // Create a number of new clouds, as if rendering has always been
        // happening.
        _lastAdded += time;
        for (var xx = _lastAdded % 500; _lastAdded >= 500; xx += 1000)
        {
            var c = new Cloud();
            if (c.Move(xx))
            {
                c.Draw(ctx, w, h);
                clouds.push(c);
            }
            _lastAdded -= 500;
        }
        
        _clouds = clouds;
        
        _viewport.Render(ctx, time, { l: 0, t: 0, r: ctx.width, b: ctx.height}, force);
        
        return true;
    };
    
    this.On = function (what, x, y, event)
    {
        _viewport.On(what, x, y, event);
        return false;
    };
    
    // Generate a natural looking initial sky.
    for (var i = 0; i != 200; ++i)
    {
        var c = new Cloud();
        if (c.Move(i * 1000))
        {
            _clouds.push(c);
        }
    }
    //this.RegisterZone('Continue', 'click', 0, 0, 5000, 2000);
    
    // var _that = this;
    // window.onresize = function () { _that.Dirty(); _that.Moved(); }
    
    return this;
}

Inherit(Wallpaper, View);


// var Background = {}
// CreateView(Background, 0, function ()
// Background.View = new View(0, function ()
    // {

// {
    // Bla()
    // {
        // let u = 6;
    // }
    // function F()
    // {
        
    // }
// }


